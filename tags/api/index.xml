<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on blog</title>
    <link>http://shidetake.com/tags/api/</link>
    <description>Recent content in Api on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Dec 2019 17:53:28 +0900</lastBuildDate>
    
        <atom:link href="http://shidetake.com/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>任意のGoogle APIをRubyで使うときの手順</title>
      <link>http://shidetake.com/google_auth/</link>
      <pubDate>Sun, 22 Dec 2019 17:53:28 +0900</pubDate>
      
      <guid>http://shidetake.com/google_auth/</guid>
      <description>&lt;p&gt;GmailのAPIについては&lt;a href=&#34;../gmail_api_1.md&#34;&gt;以前記事にした&lt;/a&gt;が、
別のAPI使うときにどうするのか、毎回悩むので汎用的な部分はここにまとめることにした。&lt;/p&gt;

&lt;p&gt;今回使いたくなったのはGoogle Photos APIsなのでこれを例に進めるが、
汎用的に使えるように書く。&lt;/p&gt;

&lt;h1 id=&#34;apiの有効化&#34;&gt;APIの有効化&lt;/h1&gt;

&lt;p&gt;Gmailのときと同じく、&lt;a href=&#34;https://console.developers.google.com/&#34; target=&#34;_blank&#34;&gt;Google API Console&lt;/a&gt;で使いたいAPIを有効化する。
ライブラリからAPIの検索ができる。今回は&amp;rsquo;Photo&amp;rsquo;で検索すると、Photos Library API&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;が出てくるので、
選択して、&amp;rsquo;有効にする&amp;rsquo;をクリック。&lt;/p&gt;

&lt;p&gt;このページにドキュメントへのリンクがあるので、開いておく（あとで使う）。&lt;/p&gt;

&lt;p&gt;続いて、Google API Consoleのトップに戻ってから、認証情報に進む。&lt;/p&gt;

&lt;p&gt;認証情報を作成 -&amp;gt; OAuthクライアントID -&amp;gt; その他&lt;/p&gt;

&lt;p&gt;で認証情報を作成して、JSONファイルをダウンロードする。&lt;/p&gt;

&lt;h1 id=&#34;scopeの取得&#34;&gt;Scopeの取得&lt;/h1&gt;

&lt;p&gt;APIのドキュメントにScopeが書かれているので、それを探す。
Photos Library APIの場合は、Overviewの中のAuthorizationにScope記載ページへのリンクがあった。
ここから、必要な権限を取れるScopeを選ぶ。&lt;/p&gt;

&lt;p&gt;ちなみにGmailとかDriveだとgoogle-api-clientというgemにScopeのパスを定義した定数があるので、それを使うことが多い。
&lt;a href=&#34;https://github.com/googleapis/google-api-ruby-client/tree/master/generated/google/apis&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;に使いたいAPIがあればそれを使うと良い。&lt;/p&gt;

&lt;h1 id=&#34;access-tokenの取得&#34;&gt;Access Tokenの取得&lt;/h1&gt;

&lt;p&gt;googleauthというgemを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install googleauth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;からの&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;googleauth&amp;quot;
require &amp;quot;googleauth/stores/file_token_store&amp;quot;
require &amp;quot;fileutils&amp;quot;
require &amp;quot;json&amp;quot;

class Auth
  OOB_URI = &amp;quot;urn:ietf:wg:oauth:2.0:oob&amp;quot;.freeze
  CREDENTIALS_PATH = &amp;quot;credentials.json&amp;quot;.freeze
  # The file token.yaml stores the user&#39;s access and refresh tokens, and is
  # created automatically when the authorization flow completes for the first
  # time.
  TOKEN_PATH = &amp;quot;token.yaml&amp;quot;.freeze
  SCOPE = [&#39;https://www.googleapis.com/auth/photoslibrary.readonly&#39;]

  def initialize
    authorize
  end

  private

  ##
  # Ensure valid credentials, either by restoring from the saved credentials
  # files or intitiating an OAuth2 authorization. If authorization is required,
  # the user&#39;s default browser will be launched to approve the request.
  #
  # @return [Google::Auth::UserRefreshCredentials] OAuth2 credentials
  def authorize
    client_id = Google::Auth::ClientId.from_file CREDENTIALS_PATH
    token_store = Google::Auth::Stores::FileTokenStore.new file: TOKEN_PATH
    authorizer = Google::Auth::UserAuthorizer.new client_id, SCOPE, token_store
    user_id = &amp;quot;default&amp;quot;
    credentials = authorizer.get_credentials user_id
    if credentials.nil?
      url = authorizer.get_authorization_url base_url: OOB_URI
      puts &amp;quot;Open the following URL in the browser and enter the &amp;quot; \
           &amp;quot;resulting code after authorization:\n&amp;quot; + url
      code = gets
      credentials = authorizer.get_and_store_credentials_from_code(
        user_id: user_id, code: code, base_url: OOB_URI
      )
    end
    credentials
  end
end

Auth.new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、CREDENTIALS_PATHはダウロードしたJSONファイル。これはrbファイルと同じ場所に置いている前提。
また、SCOPEには取得したScopeを書く。&lt;/p&gt;

&lt;p&gt;このスクリプトを実行すると、初回はAccess Tokenを取得するためのページへのURLが表示される。
ブラウザでここを開くと、アクセス権限を渡してよいか聞かれるのでOKを押すと、コードが表示されるので、それをターミナルに貼り付けてエンターキーを押すと、
Access Tokenが取得できる。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;ここでの名前はPhotos Library APIだけど、ドキュメントにはGoogle Photos APIsと出る
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dropboxで自分専用のPodcast配信</title>
      <link>http://shidetake.com/dropcast/</link>
      <pubDate>Wed, 29 Aug 2018 23:13:09 +0900</pubDate>
      
      <guid>http://shidetake.com/dropcast/</guid>
      <description>&lt;p&gt;最近Podcastにハマっている。
Rebuild.fmから始まり、backspace.fm、TCFM、バイリンガルニュースなどなど。&lt;/p&gt;

&lt;p&gt;その流れで、過去に録ったラジオを聞きたくなり、古いHDDからmp3を引っ張り出してきた。
できればPodcastと同じように聞きたいなと思い、自分専用に配信すればよいのでは、と考えて作ってみた。&lt;/p&gt;

&lt;h1 id=&#34;スクリーンショット&#34;&gt;スクリーンショット&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://shidetake.com/img/dropcast.png&#34; alt=&#34;image&#34; /&gt;
当然、著作物は私的利用に留めること。
音源もPodcast配信用のRSSファイルも自分しかアクセスできない場所に置いているので私的利用の範囲内。&lt;/p&gt;

&lt;h1 id=&#34;動機&#34;&gt;動機&lt;/h1&gt;

&lt;p&gt;上でも書いたが、Podcastにハマっているので、それと同じ体験で聞けるととても楽。
音楽再生用のツールで聞くと、レジューム再生できないだろうし、再生速度も変えられないし、
普通に音楽聴きたいときにランダム再生でラジオ流れてくるの嫌だし。&lt;/p&gt;

&lt;h1 id=&#34;サーバー選定&#34;&gt;サーバー選定&lt;/h1&gt;

&lt;p&gt;タイトルにも書いたが、Dropboxを使うことにした。
VPSでも自宅サーバでもなんでもいい気はするが、なんとなく。&lt;/p&gt;

&lt;h1 id=&#34;dropboxについて&#34;&gt;Dropboxについて&lt;/h1&gt;

&lt;p&gt;Dropbox APIというものを使って、ファイルのアップロードと、直リンクの取得を行う。
Dropbox APIの使い方についてはQiitaあたりで探してほしい。&lt;/p&gt;

&lt;p&gt;APIを使って取得できるのは共有リンクというもので、直リンクではないのが注意点。
共有リンクの&lt;code&gt;www.dropbox.com&lt;/code&gt;という部分を&lt;code&gt;dl.dropboxusercontent.com&lt;/code&gt;に置き換えて、
末尾にある&lt;code&gt;?dl=0&lt;/code&gt;という文字列を削除すると直リンクになる。&lt;/p&gt;

&lt;h1 id=&#34;配信方法&#34;&gt;配信方法&lt;/h1&gt;

&lt;p&gt;Podcastというのは、RSSフィードに書かれているリンク先のmp3を引っ張ってくるだけの仕組みなので、
mp3をDropboxにアップロードして、その直リンクをRSSに書いて、更にそのRSSファイルをDropboxにアップロードすればよい。
その直リンクを手持ちのPodcastクライアントに読ませれば完成。&lt;/p&gt;

&lt;h1 id=&#34;スクリプト&#34;&gt;スクリプト&lt;/h1&gt;

&lt;p&gt;mp3が少ない場合は手動でやってもいいが、今回は100本以上の番組だったので、スクリプト化した。
GitHubに&lt;a href=&#34;https://github.com/shidetake/dropcast&#34; target=&#34;_blank&#34;&gt;dropcast&lt;/a&gt;というリポジトリに、今回作成したスクリプトをおいた。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mp3フォルダに置いたmp3をDropbox APIを使って指定したディレクトリにアップロード&lt;/li&gt;
&lt;li&gt;アップロードしたmp3の直リンクを取得し、それをもとにPodcast用のRSSファイルを生成&lt;/li&gt;
&lt;li&gt;生成したRSSをDropboxにアップロードして、直リンクを標準出力&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という処理を一気に実行してくれるシェルスクリプト。
3行目にDropbox API用のTOKENを入力して、mp3ファイルを用意すればあとは実行するだけ。
最後に出力されるリンクを、手持ちのPodcastクライアントに入力すればOK。&lt;/p&gt;

&lt;p&gt;オプションとしてタイトルとDropbox上のパスを変更できるようにしている。&lt;/p&gt;

&lt;h1 id=&#34;おまけ&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;結構いい感じで使えるようになったけど、気になるのがサムネイル画像。
最初はどうでもいいと思っていたが、ここまで来たら画像まで完璧にしたくなってしまった。
さすがに番組紹介的な文章はいらないけれど、サムネは欲しい。&lt;/p&gt;

&lt;p&gt;ということで、スクリプトには含めてないけれど、サムネイル画像を手動で設定することにした。
画像もDropboxにアップロードしたものを使う。いつものように直リンクを取得して、RSSファイルの&lt;code&gt;title&lt;/code&gt;の下あたりに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;itunes:image href=&amp;quot;https://dl.dropboxusercontent.com/s/*/thumbnail.jpg&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで書けばOK。ただしクライアントアプリの作り次第なのかDropboxの問題なのかわからないが、
反映には結構時間がかかる。RSSファイルの名前を変えて直リンクを生成し直せばすぐに反映される。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Yahoo!ジオコーダAPIで住所から経度緯度を取得</title>
      <link>http://shidetake.com/geoapi/</link>
      <pubDate>Thu, 16 Aug 2018 15:56:34 +0900</pubDate>
      
      <guid>http://shidetake.com/geoapi/</guid>
      <description>&lt;p&gt;Rubyを使う。&lt;/p&gt;

&lt;h1 id=&#34;アプリケーションid登録&#34;&gt;アプリケーションID登録&lt;/h1&gt;

&lt;p&gt;まずはAPIを使うための登録。
&lt;a href=&#34;https://e.developer.yahoo.co.jp/register&#34; target=&#34;_blank&#34;&gt;アプリケーション登録ページ&lt;/a&gt;から登録できる。
デフォルトの設定のまま登録でOK。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.yahoo-help.jp/app/answers/detail/p/537/a_id/43398&#34; target=&#34;_blank&#34;&gt;アプリケーションIDを登録する&lt;/a&gt;に記入例があるので、
ちゃんとした登録をする場合は参考になる。&lt;/p&gt;

&lt;h1 id=&#34;お試しアクセス&#34;&gt;お試しアクセス&lt;/h1&gt;

&lt;p&gt;登録時に表示されるClient IDを使って、以下のURLにブラウザからアクセスする。
&lt;code&gt;CLIENT_ID&lt;/code&gt;という部分を自分のClient IDに置き換えること。
東京都の各区の情報が表示されれば成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://map.yahooapis.jp/geocode/V1/geoCoder?appid=CLIENT_ID&amp;amp;query=東京都
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;rubyでアクセス&#34;&gt;Rubyでアクセス&lt;/h1&gt;

&lt;p&gt;上と同じく、&lt;code&gt;CLIENT_ID&lt;/code&gt;という部分を自分のClient IDに置き換えること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json&#39;
require &#39;open-uri&#39;

CLIENT_ID = &#39;CLIENT_ID&#39;

class Geocoder
  def exec

    base_url = &#39;https://map.yahooapis.jp/geocode/V1/geoCoder&#39;
    params = {
      &#39;appid&#39; =&amp;gt; CLIENT_ID,
      &#39;query&#39; =&amp;gt; &#39;東京都&#39;,
      &#39;results&#39; =&amp;gt; &#39;1&#39;,
      &#39;output&#39; =&amp;gt; &#39;json&#39;,
    }
    url = base_url + &#39;?&#39; + URI.encode_www_form(params)

    res = JSON.parse(open(url).read)
    lon, lat = res[&#39;Feature&#39;][0][&#39;Geometry&#39;][&#39;Coordinates&#39;].split(&#39;,&#39;)
    puts &amp;quot;経度: #{lon}&amp;quot;
    puts &amp;quot;緯度: #{lat}&amp;quot;
  end
end

geocoder = Geocoder.new
geocoder.exec
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AWSのRDSインスタンスをCLIで操作</title>
      <link>http://shidetake.com/aws_cli/</link>
      <pubDate>Sun, 13 May 2018 17:45:37 +0900</pubDate>
      
      <guid>http://shidetake.com/aws_cli/</guid>
      <description>&lt;p&gt;AWSのRDSは使っていないときは停止しないともったいない。
とは言え、毎回ブラウザでログインして操作するのはかったるいので、コマンドラインで操作できるようにした。
&lt;code&gt;aws&lt;/code&gt;コマンドは既に導入しているという前提。&lt;/p&gt;

&lt;h1 id=&#34;インスタンス名の取得&#34;&gt;インスタンス名の取得&lt;/h1&gt;

&lt;p&gt;操作するインスタンスの名前を取得する。
自分で名前を付けているので、わざわざ取得しなくても知っていると思うが。
飛ばして次に進んでも良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws rds describe-db-instances
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、ずらずらとインスタンスの情報が出てくる。
&lt;code&gt;DBInstanceIdentifier&lt;/code&gt;という項目に名前がある。&lt;/p&gt;

&lt;h1 id=&#34;停止&#34;&gt;停止&lt;/h1&gt;

&lt;p&gt;以下のコマンドで停止できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws rds stop-db-instance --db-instance-identifier $instance
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;開始&#34;&gt;開始&lt;/h1&gt;

&lt;p&gt;以下のコマンドで開始できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws rds start-db-instance --db-instance-identifier $instance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitHubに&lt;a href=&#34;https://github.com/shidetake/aws/blob/master/aws_rds.sh&#34; target=&#34;_blank&#34;&gt;簡単に操作するためのシェルスクリプト&lt;/a&gt;を置いたので、参考にして欲しい。
インスタンスの名前と状態のリスト表示、全インスタンスの開始、全インスタンスの停止ができる（はず）。
手元の環境だと1インスタンスしかないので、複数インスタンスがある場合のテストはしていない。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.manabusakai.com/2017/06/stopping-rds/&#34; target=&#34;_blank&#34;&gt;RDS の停止機能を使ってコストを半分まで削減してみた&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>株価チャートからトレンドラインを引く 1</title>
      <link>http://shidetake.com/stock_trendline_1/</link>
      <pubDate>Sun, 17 Sep 2017 16:36:18 +0900</pubDate>
      
      <guid>http://shidetake.com/stock_trendline_1/</guid>
      <description>&lt;p&gt;以前、&lt;a href=&#34;../google_finance_api/&#34;&gt;Google Finance APIにより株価を取得する方法&lt;/a&gt;を書いた。
このデータからトレンドラインを引くスクリプトを作ろうと思う。&lt;/p&gt;

&lt;p&gt;まずは、トレンドラインを引くためのポイントを選択する。&lt;/p&gt;

&lt;h2 id=&#34;移動平均&#34;&gt;移動平均&lt;/h2&gt;

&lt;p&gt;取得した生データだと、エッジが立ちすぎていてトレンドラインのためのポイント選択には不向きなので、
とりあえず移動平均してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance

  BASE_URL = &#39;https://finance.google.com/finance/getprices?&#39;

  def initialize(issue)
    @issue = issue
  end

  # 終値を取得する
  # param [String] 期間
  # param [String] 間隔 [秒]
  def fetch_close(period = &#39;1Y&#39;, interval_sec = 86400)
    raw_data = Net::HTTP.get(URI.parse(BASE_URL + &amp;quot;p=#{period}&amp;amp;i=#{interval_sec}&amp;amp;x=TYO&amp;amp;q=#{@issue}&amp;quot;))
    @close = []
    raw_data.lines do |line|
      @close &amp;lt;&amp;lt; line[/^[0-9]*,([0-9]*)/, 1]
    end
    @close.compact!.map!(&amp;amp;:to_i)
  end

  # 移動平均を求める
  # @param [Fixnum] 期間
  # @note 終値が取得できている前提
  def calc_move_average(term)
    # 移動平均のために端のデータを引き伸ばす
    tmp = @close[0..0] * (term / 2) + @close + @close[-1..-1] * (term / 2)

    @move_average =
      tmp.each_cons(term).map do |window|
        window.inject(:+) / term.to_f
      end
  end
end

ISSUE_TOYOTA = 7203 # TOYOTAの証券コード
MOVE_AVERAGE_TERM = 10 # 移動平均の期間

google_finance = GoogleFinance.new(ISSUE_TOYOTA)
close = google_finance.fetch_close
move_average_close = google_finance.calc_move_average(MOVE_AVERAGE_TERM)

Numo.gnuplot do
  set title: &#39;TOYOTA&#39;
  plot [close, w: &#39;lines&#39;, t: &#39;close&#39;],
       [move_average_close, w: &#39;lines&#39;, t: &#39;move\_average&#39;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。前回の記事からメソッド名など少し変えているので注意。&lt;/p&gt;

&lt;p&gt;移動平均を求める方法はググったらいくらでも出てくるのであまり書かないが、
データの端の扱いだけは注意が必要。今回は端のデータを引き伸ばすことにした。
0で埋めるとか色々あるが、簡単にできて誤差が少ないのが特徴。&lt;/p&gt;

&lt;p&gt;移動平均の期間をどう決めるかが難しいところだが、いったん10日とした。あとで調整する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;極値&#34;&gt;極値&lt;/h2&gt;

&lt;p&gt;移動平均から極値を求める。
今回は、となりの値との差分を計算して、その差分の正負が入れ替わる瞬間を極値とする。
ただ、激しく値動きしていると、極値が多くなりすぎるので、少し計算期間を長くすることでフィルタする。
例えば計算期間を5とすると、その差分が正 =&amp;gt; 正 =&amp;gt; 負 =&amp;gt; 負ならば極大値、負 =&amp;gt; 負 =&amp;gt; 正 =&amp;gt; 正ならば極小値。&lt;/p&gt;

&lt;p&gt;この期間も移動平均の期間同様、どうやって決めるかが難しい。今回は7とした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance
  # 省略

  # 極値を求める
  # @param [Fixnum] 期間 大きいほど微小な変動を無視する
  # @note move_averageが求まっている前提
  # @note 定めた期間の中央まで単調増加し、残りが単調減少していれば極小値とする
  # @note 定めた期間の中央まで単調減少し、残りが単調増加していれば極大値とする
  def calc_extremum(term)
    local_min = { x: [], y: [] }
    local_max = { x: [], y: [] }
    @move_average.each_cons(term).with_index do |window, i|
      mid_index = i + term / 2 # windowの中央
      diff = window.each_cons(2).map { |arr| arr[1] - arr[0] }
      if diff[0..(term / 2 - 1)].all? { |elm| elm &amp;lt; 0 } and
         diff[(term / 2)..-1].all? { |elm| 0 &amp;lt; elm }
        # 負 =&amp;gt; 正
        local_min[:x] &amp;lt;&amp;lt; mid_index
        local_min[:y] &amp;lt;&amp;lt; @close[mid_index]
      elsif diff[0..(term / 2 - 1)].all? { |elm| 0 &amp;lt; elm } and
         diff[(term / 2)..-1].all? { |elm| elm &amp;lt; 0 }
        # 正 =&amp;gt; 負
        local_max[:x] &amp;lt;&amp;lt; mid_index
        local_max[:y] &amp;lt;&amp;lt; @close[mid_index]
      end
    end
    return local_min, local_max
  end
end

ISSUE_TOYOTA = 7203 # TOYOTAの証券コード
MOVE_AVERAGE_TERM = 10 # 移動平均の期間
LOCAL_SIZE = 7 # 極値計算の範囲

google_finance = GoogleFinance.new(ISSUE_TOYOTA)
close = google_finance.fetch_close
move_average_close = google_finance.calc_move_average(MOVE_AVERAGE_TERM)
local_min, local_max = google_finance.calc_extremum(LOCAL_SIZE)

Numo.gnuplot do
  set title: &#39;TOYOTA&#39;
  plot [close, w: &#39;lines&#39;, t: &#39;close&#39;],
       [move_average_close, w: &#39;lines&#39;, t: &#39;move\_average&#39;],
       [local_min[:x], local_min[:y], w: &#39;points&#39;, t: &#39;local\_min&#39;],
       [local_max[:x], local_max[:y], w: &#39;points&#39;, t: &#39;local\_max&#39;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GoogleFinanceクラスはcalc_extremumメソッド以外は変わっていないので省略した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/stock_trendline_1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;少し見にくいが、緑点が極小値、紫点が極大値。それなりにいい具合の場所を選んでいるように思える。
実際に線を引くのは次回。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Finance APIを使って株価チャートを作成</title>
      <link>http://shidetake.com/google_finance_api/</link>
      <pubDate>Mon, 04 Sep 2017 23:14:36 +0900</pubDate>
      
      <guid>http://shidetake.com/google_finance_api/</guid>
      <description>&lt;p&gt;株を買うかどうか判断するために株価チャートに補助線を書いたりする手法があるらしい。
手軽に補助線（トレンドラインと呼ぶらしい）を引いてくれるスクリプトでも作ろうかと思い、
まずは普通の株価チャートを描いてみた。&lt;/p&gt;

&lt;p&gt;そのへんに落ちてるアプリでもできそうだけど、最終的に買いかどうか判断させたり、
色々自由にカスタマイズするには自分で作ったほうがいいかなと。&lt;/p&gt;

&lt;p&gt;2017.9.16追記&lt;br /&gt;
これを公開した直後にAPIのURLが変わった模様。&lt;/p&gt;

&lt;p&gt;元は&lt;code&gt;https://www.google.com/finance/getprices?&lt;/code&gt;だったが、今は&lt;code&gt;https://finance.google.com/finance/getprices?&lt;/code&gt;になっている。
この記事のコードも修正したので、そのまま使えるはず。&lt;/p&gt;

&lt;h2 id=&#34;google-finance-api&#34;&gt;Google Finance API&lt;/h2&gt;

&lt;p&gt;国内で株価を取得するためのAPIは（正規には）ないらしい。
ただ、Google Finance APIという非公式のAPIがあり、使ってる人は使っているとか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ymtttk.hatenablog.jp/entry/2017/02/18/192130&#34; target=&#34;_blank&#34;&gt;google financeのAPIのメモ&lt;/a&gt;という記事が参考になる。
今回やりたいことのほとんどはここに書いてある。
違いは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubyを使う (Pythonのが需要ありそうだけど)&lt;/li&gt;
&lt;li&gt;チャートを描く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くらい。&lt;/p&gt;

&lt;p&gt;まずは適当な銘柄の株価を以下のように取得する。
ここではトヨタにした（丸パクリ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;

class GoogleFinance

  BASE_URL = &#39;https://finance.google.com/finance/getprices?&#39;

  def initialize(issue)
    @issue = issue
  end

  def stock(period = &#39;1Y&#39;, interval_sec = 86400)
    raw_data = Net::HTTP.get(URI.parse(BASE_URL + &amp;quot;p=#{period}&amp;amp;i=#{interval_sec}&amp;amp;x=TYO&amp;amp;q=#{@issue}&amp;quot;))
    data = []
    raw_data.lines do |line|
      data &amp;lt;&amp;lt; line[/^[0-9]*,([0-9]*)/, 1]
    end
    data.compact
  end
end

google_finance = GoogleFinance.new(7203)
stock_data = google_finance.stock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取得したデータを1行ずつ取ってきて、&lt;code&gt;/^[0-9]*,([0-9]*)/, 1&lt;/code&gt;という正規表現で終値を抜き出している。
先頭に数値があり、カンマ挟んで次の数値を取得するという意味。&lt;/p&gt;

&lt;p&gt;これを配列に突っ込んで、先頭の方にあるゴミ（抽出条件などが書かれている）をcompactで取り除くことで、
この1年間のトヨタ株の終値の配列が完成。&lt;/p&gt;

&lt;h2 id=&#34;チャート描画&#34;&gt;チャート描画&lt;/h2&gt;

&lt;p&gt;これはgnuplotを使う。
&lt;a href=&#34;https://github.com/ruby-numo/gnuplot&#34; target=&#34;_blank&#34;&gt;Numo::Gnuplot&lt;/a&gt;というgemが便利そうだったので、これを使った。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install numo-gnuplot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してから、
（当然、gnuplotも入れる）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance
  # 省略
end

google_finance = GoogleFinance.new(7203)
stock_data = google_finance.stock

Numo.gnuplot do
  set title:&#39;TOYOTA&#39;
  plot stock_data, w:&#39;lines&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。GoogleFinanceクラスは変わらないので省略した。
得られたチャートを貼って終わり。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/google_finance_api.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Picasa APIを使ってGoogle Photoからデジカメ写真だけを取得 2</title>
      <link>http://shidetake.com/google_photo_api_2/</link>
      <pubDate>Tue, 01 Aug 2017 22:41:29 +0000</pubDate>
      
      <guid>http://shidetake.com/google_photo_api_2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../google_photo_api_1/&#34;&gt;前回&lt;/a&gt;の続き。
今回は任意のアルバムから写真の情報を取得する。&lt;/p&gt;

&lt;h1 id=&#34;写真情報の取得&#34;&gt;写真情報の取得&lt;/h1&gt;

&lt;p&gt;your_album_nameアルバムから取得する場合は以下のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;picasa&#39;

client = Picasa::Client.new(
  user_id: &#39;your@email&#39;,
  access_token: &#39;your_access_token&#39;
)

albums = client.album.list.entries
album = albums.find { |a| a.title == &#39;your_album_name&#39; }

photos = client.album.show(album.id).entries

photos.each do |photo|
  puts &amp;quot;#{photo.id}, #{photo.exif.time}, #{photo.title}, #{photo.exif.model}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exif情報から撮影機器のモデル名を取得することもできた。
これで最初にやりたかったことはほぼできたが、
このスクリプトだと1000枚しか処理できないという欠点があるのでもう少し続ける。&lt;/p&gt;

&lt;h1 id=&#34;大量の写真情報の取得&#34;&gt;大量の写真情報の取得&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;start-index&lt;/code&gt;オプションを使って以下のように書くことで、1000枚以上の写真を処理することができる。
ただし、&lt;code&gt;start-index&lt;/code&gt;の最大値は10001らしいので、この方法でも11000枚までしか処理できない。
11000枚で十分事足りたので、この対処法までは調べていない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PAGE_NUM_MAX = 11

page_num = [album.numphotos / 1000, PAGE_NUM_MAX].min

page_num.times do |page|
  opt = {}
  opt[&#39;start-index&#39;] = page * 1000 + 1
  photos = client.album.show(album.id, opt).entries
  photos.each do |photo|
    puts &amp;quot;#{photo.id}, #{photo.exif.time}, #{photo.title}, #{photo.exif.model}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;albumの指定まではこれまでと変わらないので省略した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Picasa APIを使ってGoogle Photoからデジカメ写真だけを取得 1</title>
      <link>http://shidetake.com/google_photo_api_1/</link>
      <pubDate>Sun, 30 Jul 2017 22:56:40 +0000</pubDate>
      
      <guid>http://shidetake.com/google_photo_api_1/</guid>
      <description>&lt;p&gt;Google Photoの検索では、Exif情報の撮影機器のモデル名をキーにすることができないらしい。
あるデジカメで撮った写真だけを抽出するために試行錯誤した結果、
PicasaのAPIを使うことで実現できたので、そのやり方を記す。&lt;/p&gt;

&lt;p&gt;ちなみにGoogle PhotoのAPIはまだ用意されておらず、Piacasa APIがその代替となっている。&lt;/p&gt;

&lt;h1 id=&#34;picasa-apiを使う&#34;&gt;Picasa APIを使う&lt;/h1&gt;

&lt;h2 id=&#34;access-tokenの取得&#34;&gt;Access tokenの取得&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../gmail_api_1/&#34;&gt;Gmailのとき&lt;/a&gt;とは違い、PicasaのAPIを使うのは少しコツがいる。
既にPicasaのサービスが終了しているためか、API MANAGERで検索してもPicasa APIが出てこない。&lt;/p&gt;

&lt;p&gt;そこで、Access tokenを取得するために&lt;a href=&#34;https://developers.google.com/oauthplayground/&#34; target=&#34;_blank&#34;&gt;OAuth 2.0 Playground&lt;/a&gt;を使う。&lt;/p&gt;

&lt;p&gt;Select the scopeの一覧から、Picasa Web v2を選択して表示されるURLをクリックする。
Authorize APIsボタンが有効になるので、それを押してAPIを有効にする許可を与える。&lt;/p&gt;

&lt;p&gt;Authorization codeが取得できるので、続けてExchange authorization code for tokensボタンを押下。
これでAccess tokenが得られる。&lt;/p&gt;

&lt;h2 id=&#34;access-tokenの確認&#34;&gt;Access tokenの確認&lt;/h2&gt;

&lt;p&gt;得られたAccess tokenの確認も兼ねて、簡単なAPIを使ってみる。&lt;/p&gt;

&lt;p&gt;まずはRubyでPicasa APIを簡単に使えるようにするgemをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install picasa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは以下のようなスクリプトでアルバム名の一覧を取得する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;picasa&#39;

client = Picasa::Client.new(
  user_id: &#39;your@email&#39;,
  access_token: &#39;your_access_token&#39;
)

albums = client.album.list.entries
albums.each { |a| p a.title }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;your@emailとyour_access_tokenにはそれぞれ自分の（Access token取得時に許可を与えた）アカウントと、上で取得したAccess tokenを入れる。&lt;/p&gt;

&lt;p&gt;Google Photoのアルバム名の一覧が表示されれば成功。Access tokenがちゃんと使えることがわかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../google_photo_api_2/&#34;&gt;次回&lt;/a&gt;以降で写真の取得、Exif情報の取得あたりのやり方を書いていく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RubyでGmail本文を取得する 2</title>
      <link>http://shidetake.com/gmail_api_2/</link>
      <pubDate>Mon, 26 Jun 2017 22:44:57 +0900</pubDate>
      
      <guid>http://shidetake.com/gmail_api_2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../gmail_api_1/&#34;&gt;前回&lt;/a&gt;はアクセストークンを取得して、メール本文を取得することに成功した。
ただしアクセストークンには期限があり、取得しなおさなくてはならない。
今回はリフレッシュトークンを使うことで、これを解決する。&lt;/p&gt;

&lt;h2 id=&#34;リフレッシュトークンの取得&#34;&gt;リフレッシュトークンの取得&lt;/h2&gt;

&lt;p&gt;前回のアクセストークン取得の項に記載の通り。&lt;/p&gt;

&lt;h2 id=&#34;リフレッシュトークンを使ったメールの取得&#34;&gt;リフレッシュトークンを使ったメールの取得&lt;/h2&gt;

&lt;p&gt;前回からの差分&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;require &#39;google/api_client&#39;
require &#39;json&#39;

-ACCESS_TOKEN     = &#39;YourAccessToken&#39;
+CLIENT_ID        = &#39;YourClientID&#39;
+CLIENT_SECRET    = &#39;YourClientSecret&#39;
+REFRESH_TOKEN    = &#39;YourRefreshToken&#39;
APPLICATION_NAME = &#39;YourApplicationName&#39;

# APIクライアントの準備
client = Google::APIClient.new(application_name: APPLICATION_NAME)
-client.authorization.access_token = ACCESS_TOKEN
+client.authorization = Signet::OAuth2::Client.new(
+  token_credential_uri: &#39;https://accounts.google.com/o/oauth2/token&#39;,
+  audience:             &#39;https://accounts.google.com/o/oauth2/token&#39;,
+  scope:                [&#39;https://www.googleapis.com/auth/drive.file&#39;],
+  client_id:     CLIENT_ID,
+  client_secret: CLIENT_SECRET,
+  refresh_token: REFRESH_TOKEN,
+)
+
+client.authorization.refresh!
gmail = client.discovered_api(&#39;gmail&#39;)

# query
res = client.execute(
  api_method: gmail.users.messages.list,
  parameters: {&#39;userId&#39; =&amp;gt; &#39;me&#39;, &#39;q&#39;=&amp;gt;&#39;from:auto-confirm@amazon.co.jp&#39;},
)

# parse
if res.status == 200
  json = JSON.parse(res.body)
  json[&#39;messages&#39;].each do |mail_ids|
    mail = client.execute(
      api_method: gmail.users.messages.get,
      parameters: {&#39;userId&#39; =&amp;gt; &#39;me&#39;, &#39;id&#39;=&amp;gt;mail_ids[&#39;id&#39;]},
    )
    p mail.body
  end
else
  puts &#39;error&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでこのシリーズは終わり。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RubyでGmail本文を取得する 1</title>
      <link>http://shidetake.com/gmail_api_1/</link>
      <pubDate>Tue, 20 Jun 2017 22:55:21 +0900</pubDate>
      
      <guid>http://shidetake.com/gmail_api_1/</guid>
      <description>&lt;p&gt;GmailのAPIをRubyで使う方法を何回かに分けて書く。&lt;/p&gt;

&lt;h2 id=&#34;api準備&#34;&gt;API準備&lt;/h2&gt;

&lt;p&gt;まずはAPIを使うための準備。&lt;a href=&#34;https://console.developers.google.com/&#34; target=&#34;_blank&#34;&gt;https://console.developers.google.com/&lt;/a&gt; にアクセスして、プロジェクトを作成する。
それから、Gmail APIを有効にし、認証情報を追加する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用するAPI =&amp;gt; Gmail API&lt;/li&gt;
&lt;li&gt;APIを呼び出す場所 =&amp;gt; その他のUI&lt;/li&gt;
&lt;li&gt;アクセスするデータの種類 =&amp;gt; ユーザーデータ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは適当に選んで進めると、クライントIDとクライアントシークレットが取得できる。&lt;/p&gt;

&lt;h2 id=&#34;access-tokenの取得&#34;&gt;Access Tokenの取得&lt;/h2&gt;

&lt;p&gt;取得したクライアントIDとクライアントシークレットから、
以下のスクリプトでアクセストークンとリフレッシュトークンを取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;uri&#39;
require &#39;oauth2&#39;
require &#39;launchy&#39;

CLIENT_ID     = &#39;YourClientID&#39;
CLIENT_SECRET = &#39;YourClientSecret&#39;

client = OAuth2::Client.new(
  CLIENT_ID, CLIENT_SECRET,
  :site =&amp;gt; &amp;quot;https://accounts.google.com&amp;quot;,
  :token_url =&amp;gt; &amp;quot;/o/oauth2/token&amp;quot;,
  :authorize_url =&amp;gt; &amp;quot;/o/oauth2/auth&amp;quot;)
auth_url = client.auth_code.authorize_url(
  :redirect_uri =&amp;gt; &#39;urn:ietf:wg:oauth:2.0:oob&#39;,
  :scope =&amp;gt; &#39;https://www.googleapis.com/auth/gmail.readonly&#39;)
 
# 表示されるURLをブラウザで開く
Launchy.open auth_url
 
print &amp;quot;authorization code:&amp;quot;
authorization_code = gets.chomp

res = Net::HTTP.post_form(URI.parse(&#39;https://accounts.google.com/o/oauth2/token&#39;),
                          {&#39;client_id&#39;     =&amp;gt; CLIENT_ID,
                           &#39;client_secret&#39; =&amp;gt; CLIENT_SECRET,
                           &#39;redirect_uri&#39;  =&amp;gt; &#39;urn:ietf:wg:oauth:2.0:oob&#39;,
                           &#39;grant_type&#39;    =&amp;gt; &#39;authorization_code&#39;,
                           &#39;code&#39;          =&amp;gt; authorization_code})
puts res.body
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;メールの取得&#34;&gt;メールの取得&lt;/h2&gt;

&lt;p&gt;取得したアクセストークンを以下のように使って、Gmail APIが使える。
以下は、auto-confirm@amazon.co.jpからの受信メールを取得するスクリプト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;google/api_client&#39;
require &#39;json&#39;

ACCESS_TOKEN     = &#39;YourAccessToken&#39;
APPLICATION_NAME = &#39;YourApplicationName&#39;

# APIクライアントの準備
client = Google::APIClient.new(application_name: APPLICATION_NAME)
client.authorization.access_token = ACCESS_TOKEN
gmail = client.discovered_api(&#39;gmail&#39;)

# query
res = client.execute(
  api_method: gmail.users.messages.list,
  parameters: {&#39;userId&#39; =&amp;gt; &#39;me&#39;, &#39;q&#39;=&amp;gt;&#39;from:auto-confirm@amazon.co.jp&#39;},
)

# parse
if res.status == 200
  json = JSON.parse(res.body)
  json[&#39;messages&#39;].each do |mail_ids|
    mail = client.execute(
      api_method: gmail.users.messages.get,
      parameters: {&#39;userId&#39; =&amp;gt; &#39;me&#39;, &#39;id&#39;=&amp;gt;mail_ids[&#39;id&#39;]},
    )
    p mail.body
  end
else
  puts &#39;error&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;今後&#34;&gt;今後&lt;/h2&gt;

&lt;p&gt;アクセストークンには期限があり、一定時間経過すると使えなくなってしまう。
これを解決するのがリフレッシュトークンを使った方法。&lt;a href=&#34;../gmail_api_2/&#34;&gt;次回&lt;/a&gt;はこれを使っていつでもAPIを利用できるようにする。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
