<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fintech on blog</title>
    <link>http://shidetake.com/tags/fintech/</link>
    <description>Recent content in Fintech on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Dec 2017 23:37:27 +0900</lastBuildDate>
    
        <atom:link href="http://shidetake.com/tags/fintech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gmailに重要なメールが届いたらLINEに通知する</title>
      <link>http://shidetake.com/gmail2line/</link>
      <pubDate>Thu, 21 Dec 2017 23:37:27 +0900</pubDate>
      
      <guid>http://shidetake.com/gmail2line/</guid>
      <description>&lt;p&gt;最近はめっきりメールを使わなくなった。iOSもメール機能なんかどうでもいいと思っているのか、
いまいち使い勝手が悪い。Gmailのプッシュ通知に非対応ってどうなの。&lt;/p&gt;

&lt;p&gt;それでもAmazonの注文メールやら、航空券の予約完了メールやら、色々な場面で送られてくるので、嫌々ながら使っている。
中には緊急性のあるメールもあって、その筆頭が銀行引き落とし失敗メール。残高が足りずに引き落とされなかったときに送られてくる。
早めに気づいて入金できれば、再度引き落としのタイミングがあって、なんとかカードを止められずにすむ。&lt;/p&gt;

&lt;p&gt;今回は、引き落としに失敗した時にLINE通知してくれるシステムを構築する。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;先に白状しておくと、この記事は
&lt;a href=&#34;https://asatte.biz/gmail-line/&#34; target=&#34;_blank&#34;&gt;Google Apps ScriptでGmailの特定のメールを受信したらLINEと連携して通知する&lt;/a&gt;という記事のほとんどパクリです。&lt;/p&gt;

&lt;h2 id=&#34;構成&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;Google Apps ScriptとLINE Messaging APIを組み合わせて使う。
IFTTTあたりを使うともっと簡単に作れるが、ポーリング間隔が数時間と長すぎるので今回はNG。
Google Apps Scriptだと1分間隔でポーリング可能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shidetake.com/img/gmail2line.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;LINE Messaging APIを使えるようにしておく(&lt;a href=&#34;../line_push/&#34;&gt;別記事参照&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Gmailにtreatedラベルを作る

&lt;ul&gt;
&lt;li&gt;1度処理したメールを再度処理しないようにするためのラベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;google-apps-script&#34;&gt;Google Apps Script&lt;/h2&gt;

&lt;p&gt;以下のようなスクリプトを作る。&lt;/p&gt;

&lt;p&gt;Gmailから&lt;code&gt;QUERY&lt;/code&gt;にマッチするメールを取得して、メールの数だけLINEにメッセージを送る。
処理したメールはtreatedラベルを付けて、再度処理しないようにしている。（そのために&lt;code&gt;QUERY&lt;/code&gt;で&lt;code&gt;-label:treated&lt;/code&gt;している）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var CHANNEL_ACCESS_TOKEN = &#39;YOUR_CHANNEL_ACCESS_TOKEN&#39;;
var LINE_USER_ID = &#39;YOUR_LINE_USER_ID&#39;;
var QUERY = &#39;-label:treated subject:未済&#39;;

function main() {
  var threads = GmailApp.search(QUERY, 0, 10); 
  var messages = GmailApp.getMessagesForThreads(threads);
  
  for (var i in messages) {
    for (var j in messages[i]) {
      line_push(&#39;MUFJからの引き落とし失敗してるよ&#39;);
    }
  }
  
  // add label:treated
  var label_treated = GmailApp.getUserLabelByName(&#39;treated&#39;);
  for (var i in threads) {
    threads[i].addLabel(label_treated);    
  }
}

// LINEにプッシュ通知する
function line_push(message) {
  var postData = {
    &amp;quot;to&amp;quot;: LINE_USER_ID,
    &amp;quot;messages&amp;quot; : [
      {
        &amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;,
        &amp;quot;text&amp;quot; : message
      }
    ]
  };
  
  var options = {
    &amp;quot;method&amp;quot; : &amp;quot;post&amp;quot;,
    &amp;quot;headers&amp;quot; : {
      &amp;quot;Content-Type&amp;quot; : &amp;quot;application/json&amp;quot;,
      &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer &amp;quot; + CHANNEL_ACCESS_TOKEN
    },
    &amp;quot;payload&amp;quot; : JSON.stringify(postData)
  };
  
  UrlFetchApp.fetch(&amp;quot;https://api.line.me/v2/bot/message/push&amp;quot;, options);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;トリガの設定&#34;&gt;トリガの設定&lt;/h2&gt;

&lt;p&gt;Google Apps Scriptのスクリプト編集画面で、編集 &amp;gt; 現在のプロジェクトのトリガーを選択する。
ここで、main関数を任意の時間間隔で実行するように設定できる。
最短は1分なのでとりあえず1分にしておいた。&lt;/p&gt;

&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;読めばわかると思うが、今回の例は三菱東京UFJ銀行の口座からの引き落としに失敗したときのケース。
このメールが届くようにするには、三菱東京UFJダイレクトで設定する必要がある（設定したのはだいぶ前なので詳細は忘れた）。&lt;/p&gt;

&lt;p&gt;で、みずほ銀行も使っているのでこっちも同じようにしようと思ったら、みずほは通知メールサービスが無いらしい。
結構古い情報だけど、&lt;a href=&#34;http://moneylab.ldblog.jp/archives/51639875.html&#34; target=&#34;_blank&#34;&gt;このブログ記事&lt;/a&gt;によると、銀行によって通知サービスが無かったり、有料だったりする模様。&lt;/p&gt;

&lt;p&gt;サブバンクをみずほから新生銀行あたりに乗り換えようかなと思った。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>株価チャートからトレンドラインを引く 1</title>
      <link>http://shidetake.com/stock_trendline_1/</link>
      <pubDate>Sun, 17 Sep 2017 16:36:18 +0900</pubDate>
      
      <guid>http://shidetake.com/stock_trendline_1/</guid>
      <description>&lt;p&gt;以前、&lt;a href=&#34;../google_finance_api/&#34;&gt;Google Finance APIにより株価を取得する方法&lt;/a&gt;を書いた。
このデータからトレンドラインを引くスクリプトを作ろうと思う。&lt;/p&gt;

&lt;p&gt;まずは、トレンドラインを引くためのポイントを選択する。&lt;/p&gt;

&lt;h2 id=&#34;移動平均&#34;&gt;移動平均&lt;/h2&gt;

&lt;p&gt;取得した生データだと、エッジが立ちすぎていてトレンドラインのためのポイント選択には不向きなので、
とりあえず移動平均してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance

  BASE_URL = &#39;https://finance.google.com/finance/getprices?&#39;

  def initialize(issue)
    @issue = issue
  end

  # 終値を取得する
  # param [String] 期間
  # param [String] 間隔 [秒]
  def fetch_close(period = &#39;1Y&#39;, interval_sec = 86400)
    raw_data = Net::HTTP.get(URI.parse(BASE_URL + &amp;quot;p=#{period}&amp;amp;i=#{interval_sec}&amp;amp;x=TYO&amp;amp;q=#{@issue}&amp;quot;))
    @close = []
    raw_data.lines do |line|
      @close &amp;lt;&amp;lt; line[/^[0-9]*,([0-9]*)/, 1]
    end
    @close.compact!.map!(&amp;amp;:to_i)
  end

  # 移動平均を求める
  # @param [Fixnum] 期間
  # @note 終値が取得できている前提
  def calc_move_average(term)
    # 移動平均のために端のデータを引き伸ばす
    tmp = @close[0..0] * (term / 2) + @close + @close[-1..-1] * (term / 2)

    @move_average =
      tmp.each_cons(term).map do |window|
        window.inject(:+) / term.to_f
      end
  end
end

ISSUE_TOYOTA = 7203 # TOYOTAの証券コード
MOVE_AVERAGE_TERM = 10 # 移動平均の期間

google_finance = GoogleFinance.new(ISSUE_TOYOTA)
close = google_finance.fetch_close
move_average_close = google_finance.calc_move_average(MOVE_AVERAGE_TERM)

Numo.gnuplot do
  set title: &#39;TOYOTA&#39;
  plot [close, w: &#39;lines&#39;, t: &#39;close&#39;],
       [move_average_close, w: &#39;lines&#39;, t: &#39;move\_average&#39;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。前回の記事からメソッド名など少し変えているので注意。&lt;/p&gt;

&lt;p&gt;移動平均を求める方法はググったらいくらでも出てくるのであまり書かないが、
データの端の扱いだけは注意が必要。今回は端のデータを引き伸ばすことにした。
0で埋めるとか色々あるが、簡単にできて誤差が少ないのが特徴。&lt;/p&gt;

&lt;p&gt;移動平均の期間をどう決めるかが難しいところだが、いったん10日とした。あとで調整する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;極値&#34;&gt;極値&lt;/h2&gt;

&lt;p&gt;移動平均から極値を求める。
今回は、となりの値との差分を計算して、その差分の正負が入れ替わる瞬間を極値とする。
ただ、激しく値動きしていると、極値が多くなりすぎるので、少し計算期間を長くすることでフィルタする。
例えば計算期間を5とすると、その差分が正 =&amp;gt; 正 =&amp;gt; 負 =&amp;gt; 負ならば極大値、負 =&amp;gt; 負 =&amp;gt; 正 =&amp;gt; 正ならば極小値。&lt;/p&gt;

&lt;p&gt;この期間も移動平均の期間同様、どうやって決めるかが難しい。今回は7とした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance
  # 省略

  # 極値を求める
  # @param [Fixnum] 期間 大きいほど微小な変動を無視する
  # @note move_averageが求まっている前提
  # @note 定めた期間の中央まで単調増加し、残りが単調減少していれば極小値とする
  # @note 定めた期間の中央まで単調減少し、残りが単調増加していれば極大値とする
  def calc_extremum(term)
    local_min = { x: [], y: [] }
    local_max = { x: [], y: [] }
    @move_average.each_cons(term).with_index do |window, i|
      mid_index = i + term / 2 # windowの中央
      diff = window.each_cons(2).map { |arr| arr[1] - arr[0] }
      if diff[0..(term / 2 - 1)].all? { |elm| elm &amp;lt; 0 } and
         diff[(term / 2)..-1].all? { |elm| 0 &amp;lt; elm }
        # 負 =&amp;gt; 正
        local_min[:x] &amp;lt;&amp;lt; mid_index
        local_min[:y] &amp;lt;&amp;lt; @close[mid_index]
      elsif diff[0..(term / 2 - 1)].all? { |elm| 0 &amp;lt; elm } and
         diff[(term / 2)..-1].all? { |elm| elm &amp;lt; 0 }
        # 正 =&amp;gt; 負
        local_max[:x] &amp;lt;&amp;lt; mid_index
        local_max[:y] &amp;lt;&amp;lt; @close[mid_index]
      end
    end
    return local_min, local_max
  end
end

ISSUE_TOYOTA = 7203 # TOYOTAの証券コード
MOVE_AVERAGE_TERM = 10 # 移動平均の期間
LOCAL_SIZE = 7 # 極値計算の範囲

google_finance = GoogleFinance.new(ISSUE_TOYOTA)
close = google_finance.fetch_close
move_average_close = google_finance.calc_move_average(MOVE_AVERAGE_TERM)
local_min, local_max = google_finance.calc_extremum(LOCAL_SIZE)

Numo.gnuplot do
  set title: &#39;TOYOTA&#39;
  plot [close, w: &#39;lines&#39;, t: &#39;close&#39;],
       [move_average_close, w: &#39;lines&#39;, t: &#39;move\_average&#39;],
       [local_min[:x], local_min[:y], w: &#39;points&#39;, t: &#39;local\_min&#39;],
       [local_max[:x], local_max[:y], w: &#39;points&#39;, t: &#39;local\_max&#39;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GoogleFinanceクラスはcalc_extremumメソッド以外は変わっていないので省略した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shidetake.com/img/stock_trendline_1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;少し見にくいが、緑点が極小値、紫点が極大値。それなりにいい具合の場所を選んでいるように思える。
実際に線を引くのは次回。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Finance APIを使って株価チャートを作成</title>
      <link>http://shidetake.com/google_finance_api/</link>
      <pubDate>Mon, 04 Sep 2017 23:14:36 +0900</pubDate>
      
      <guid>http://shidetake.com/google_finance_api/</guid>
      <description>&lt;p&gt;株を買うかどうか判断するために株価チャートに補助線を書いたりする手法があるらしい。
手軽に補助線（トレンドラインと呼ぶらしい）を引いてくれるスクリプトでも作ろうかと思い、
まずは普通の株価チャートを描いてみた。&lt;/p&gt;

&lt;p&gt;そのへんに落ちてるアプリでもできそうだけど、最終的に買いかどうか判断させたり、
色々自由にカスタマイズするには自分で作ったほうがいいかなと。&lt;/p&gt;

&lt;p&gt;2017.9.16追記&lt;br /&gt;
これを公開した直後にAPIのURLが変わった模様。&lt;/p&gt;

&lt;p&gt;元は&lt;code&gt;https://www.google.com/finance/getprices?&lt;/code&gt;だったが、今は&lt;code&gt;https://finance.google.com/finance/getprices?&lt;/code&gt;になっている。
この記事のコードも修正したので、そのまま使えるはず。&lt;/p&gt;

&lt;h2 id=&#34;google-finance-api&#34;&gt;Google Finance API&lt;/h2&gt;

&lt;p&gt;国内で株価を取得するためのAPIは（正規には）ないらしい。
ただ、Google Finance APIという非公式のAPIがあり、使ってる人は使っているとか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ymtttk.hatenablog.jp/entry/2017/02/18/192130&#34; target=&#34;_blank&#34;&gt;google financeのAPIのメモ&lt;/a&gt;という記事が参考になる。
今回やりたいことのほとんどはここに書いてある。
違いは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubyを使う (Pythonのが需要ありそうだけど)&lt;/li&gt;
&lt;li&gt;チャートを描く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くらい。&lt;/p&gt;

&lt;p&gt;まずは適当な銘柄の株価を以下のように取得する。
ここではトヨタにした（丸パクリ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;

class GoogleFinance

  BASE_URL = &#39;https://finance.google.com/finance/getprices?&#39;

  def initialize(issue)
    @issue = issue
  end

  def stock(period = &#39;1Y&#39;, interval_sec = 86400)
    raw_data = Net::HTTP.get(URI.parse(BASE_URL + &amp;quot;p=#{period}&amp;amp;i=#{interval_sec}&amp;amp;x=TYO&amp;amp;q=#{@issue}&amp;quot;))
    data = []
    raw_data.lines do |line|
      data &amp;lt;&amp;lt; line[/^[0-9]*,([0-9]*)/, 1]
    end
    data.compact
  end
end

google_finance = GoogleFinance.new(7203)
stock_data = google_finance.stock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取得したデータを1行ずつ取ってきて、&lt;code&gt;/^[0-9]*,([0-9]*)/, 1&lt;/code&gt;という正規表現で終値を抜き出している。
先頭に数値があり、カンマ挟んで次の数値を取得するという意味。&lt;/p&gt;

&lt;p&gt;これを配列に突っ込んで、先頭の方にあるゴミ（抽出条件などが書かれている）をcompactで取り除くことで、
この1年間のトヨタ株の終値の配列が完成。&lt;/p&gt;

&lt;h2 id=&#34;チャート描画&#34;&gt;チャート描画&lt;/h2&gt;

&lt;p&gt;これはgnuplotを使う。
&lt;a href=&#34;https://github.com/ruby-numo/gnuplot&#34; target=&#34;_blank&#34;&gt;Numo::Gnuplot&lt;/a&gt;というgemが便利そうだったので、これを使った。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install numo-gnuplot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してから、
（当然、gnuplotも入れる）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net/http&#39;
require &#39;numo/gnuplot&#39;

class GoogleFinance
  # 省略
end

google_finance = GoogleFinance.new(7203)
stock_data = google_finance.stock

Numo.gnuplot do
  set title:&#39;TOYOTA&#39;
  plot stock_data, w:&#39;lines&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。GoogleFinanceクラスは変わらないので省略した。
得られたチャートを貼って終わり。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shidetake.com/img/google_finance_api.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
