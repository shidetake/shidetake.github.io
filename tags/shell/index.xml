<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on blog</title>
    <link>http://shidetake.com/tags/shell/</link>
    <description>Recent content in Shell on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Aug 2018 23:13:09 +0900</lastBuildDate>
    
        <atom:link href="http://shidetake.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dropboxで自分専用のPodcast配信</title>
      <link>http://shidetake.com/dropcast/</link>
      <pubDate>Wed, 29 Aug 2018 23:13:09 +0900</pubDate>
      
      <guid>http://shidetake.com/dropcast/</guid>
      <description>&lt;p&gt;最近Podcastにハマっている。
Rebuild.fmから始まり、backspace.fm、TCFM、バイリンガルニュースなどなど。&lt;/p&gt;

&lt;p&gt;その流れで、過去に録ったラジオを聞きたくなり、古いHDDからmp3を引っ張り出してきた。
できればPodcastと同じように聞きたいなと思い、自分専用に配信すればよいのでは、と考えて作ってみた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;動機&#34;&gt;動機&lt;/h1&gt;

&lt;p&gt;上でも書いたが、Podcastにハマっているので、それと同じ体験で聞けるととても楽。
音楽再生用のツールで聞くと、レジューム再生できないだろうし、再生速度も変えられないし、
普通に音楽聴きたいときにランダム再生でラジオ流れてくるの嫌だし。&lt;/p&gt;

&lt;h1 id=&#34;サーバー選定&#34;&gt;サーバー選定&lt;/h1&gt;

&lt;p&gt;タイトルにも書いたが、Dropboxを使うことにした。
VPSでも自宅サーバでもなんでもいい気はするが、なんとなく。&lt;/p&gt;

&lt;h1 id=&#34;dropboxについて&#34;&gt;Dropboxについて&lt;/h1&gt;

&lt;p&gt;Dropbox APIというものを使って、ファイルのアップロードと、直リンクの取得を行う。
Dropbox APIの使い方についてはQiitaあたりで探してほしい。&lt;/p&gt;

&lt;p&gt;APIを使って取得できるのは共有リンクというもので、直リンクではないのが注意点。
共有リンクの&lt;code&gt;www.dropbox.com&lt;/code&gt;という部分を&lt;code&gt;dl.dropboxusercontent.com&lt;/code&gt;に置き換えて、
末尾にある&lt;code&gt;?dl=0&lt;/code&gt;という文字列を削除すると直リンクになる。&lt;/p&gt;

&lt;h1 id=&#34;配信方法&#34;&gt;配信方法&lt;/h1&gt;

&lt;p&gt;Podcastというのは、RSSフィードに書かれているリンク先のmp3を引っ張ってくるだけの仕組みなので、
mp3をDropboxにアップロードして、その直リンクをRSSに書いて、更にそのRSSファイルをDropboxにアップロードすればよい。
その直リンクを手持ちのPodcastクライアントに読ませれば完成。&lt;/p&gt;

&lt;h1 id=&#34;スクリプト&#34;&gt;スクリプト&lt;/h1&gt;

&lt;p&gt;mp3が少ない場合は手動でやってもいいが、今回は100本以上の番組だったので、スクリプト化した。
GitHubに&lt;a href=&#34;https://github.com/shidetake/dropcast&#34; target=&#34;_blank&#34;&gt;dropcast&lt;/a&gt;というリポジトリに、今回作成したスクリプトをおいた。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mp3フォルダに置いたmp3をDropbox APIを使って指定したディレクトリにアップロード&lt;/li&gt;
&lt;li&gt;アップロードしたmp3の直リンクを取得し、それをもとにPodcast用のRSSファイルを生成&lt;/li&gt;
&lt;li&gt;生成したRSSをDropboxにアップロードして、直リンクを標準出力&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という処理を一気に実行してくれるシェルスクリプト。
3行目にDropbox API用のTOKENを入力して、mp3ファイルを用意すればあとは実行するだけ。
最後に出力されるリンクを、手持ちのPodcastクライアントに入力すればOK。&lt;/p&gt;

&lt;p&gt;オプションとしてタイトルとDropbox上のパスを変更できるようにしている。&lt;/p&gt;

&lt;h1 id=&#34;おまけ&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;結構いい感じで使えるようになったけど、気になるのがサムネイル画像。
最初はどうでもいいと思っていたが、ここまで来たら画像まで完璧にしたくなってしまった。
さすがに番組紹介的な文章はいらないけれど、サムネは欲しい。&lt;/p&gt;

&lt;p&gt;ということで、スクリプトには含めてないけれど、サムネイル画像を手動で設定することにした。
画像もDropboxにアップロードしたものを使う。いつものように直リンクを取得して、RSSファイルの&lt;code&gt;title&lt;/code&gt;の下あたりに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;itunes:image href=&amp;quot;https://dl.dropboxusercontent.com/s/*/thumbnail.jpg&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで書けばOK。ただしクライアントアプリの作り次第なのかDropboxの問題なのかわからないが、
反映には結構時間がかかる。RSSファイルの名前を変えて直リンクを生成し直せばすぐに反映される。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
