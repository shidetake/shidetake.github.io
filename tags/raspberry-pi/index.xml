<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on blog</title>
    <link>http://shidetake.com/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jan 2018 22:28:20 +0900</lastBuildDate>
    
        <atom:link href="http://shidetake.com/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apple TVをRaspberry Piで操作</title>
      <link>http://shidetake.com/pyatv/</link>
      <pubDate>Fri, 26 Jan 2018 22:28:20 +0900</pubDate>
      
      <guid>http://shidetake.com/pyatv/</guid>
      <description>&lt;p&gt;スマートホーム化のために、いろんな家電をRaspberry Piで動かせるようにしている。
テレビはほとんどApple TVのために存在しているので、これを動かしてみた。&lt;/p&gt;

&lt;p&gt;使ったのは、&lt;code&gt;pyatv&lt;/code&gt;というツール。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/postlund/pyatv&#34; target=&#34;_blank&#34;&gt;postlund/pyatv&lt;/a&gt;にインストール方法から使い方まで書いてあるが、
一部わかりにくいところがあったので、そこだけ説明する。&lt;/p&gt;

&lt;h2 id=&#34;初期設定&#34;&gt;初期設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pip install pyatv&lt;/code&gt;したあと、ペアリングが必要。
iTunesのホームシェアリングを有効にしている場合はいらないようだけど、
無効の場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;atvremote pair
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;して、Apple TV側で、設定 &amp;gt; リモコンとデバイス &amp;gt; Remote Appとデバイス と進み、pyatvを選択して、pinに1234と入力すればよい。&lt;/p&gt;

&lt;h2 id=&#34;動作確認&#34;&gt;動作確認&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;atvremote -a menu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでMENUボタンを押したときと同じように動けばOK。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>スピードテストを定期的に実行して回線速度の推移を見る</title>
      <link>http://shidetake.com/speedtest/</link>
      <pubDate>Mon, 16 Oct 2017 22:43:05 +0900</pubDate>
      
      <guid>http://shidetake.com/speedtest/</guid>
      <description>&lt;p&gt;自宅の回線速度が遅いので、なんとか改善できないか考えている。
まずは、現状把握ということで、スピードテストを実施した。
常に遅いのか、時間によって遅いのかなどがわかれば改善の手がかりになるかもしれないと考え、
cron定期的に実行してくれるようにした。&lt;/p&gt;

&lt;p&gt;Raspberry Piで動作する。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;実行結果&#34;&gt;実行結果&lt;/h2&gt;

&lt;p&gt;まずは作成したスクリプトで取得したデータを載せる。
csv形式で左からping値 [ms]、Download [Mbit/s], Upload [Mbit/s], 実行日時。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;167.908,2.23,5.37,2017/10/16 00:00:39
129.306,7.82,5.82,2017/10/16 01:00:41
88.187,18.31,19.27,2017/10/16 02:00:36
87.879,24.88,21.74,2017/10/16 03:00:36
156.129,26.47,16.25,2017/10/16 04:00:41
75.103,25.61,21.42,2017/10/16 05:00:36
94.37,26.99,21.17,2017/10/16 06:00:40
76.879,24.55,21.35,2017/10/16 07:00:38
71.107,24.72,21.67,2017/10/16 08:01:39
254.614,19.98,16.24,2017/10/16 09:00:37
81.341,23.46,18.63,2017/10/16 10:00:37
89.473,23.30,17.17,2017/10/16 11:00:38
275.777,23.40,10.58,2017/10/16 12:00:38
110.481,22.26,17.16,2017/10/16 13:00:36
149.522,25.06,18.38,2017/10/16 14:00:36
82.292,17.59,8.26,2017/10/16 15:00:38
202.99,17.83,4.05,2017/10/16 16:00:38
102.178,17.50,4.52,2017/10/16 17:00:37
114.628,14.78,16.30,2017/10/16 18:00:38
102.745,12.89,13.11,2017/10/16 19:00:39
1795.938,11.67,1.76,2017/10/16 20:00:51
699.312,6.57,3.20,2017/10/16 21:00:52
352.963,3.47,0.98,2017/10/16 22:00:47
480.408,3.98,2.48,2017/10/16 23:00:47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでにグラフ化。
&lt;img src=&#34;http://ift.tt/2ifbMt0&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昼間は25Mbpsくらい出ているらしい。15時以降から下がりだして、21時から25時までは1桁というありさま。&lt;/p&gt;

&lt;h2 id=&#34;speedtest-cli&#34;&gt;speedtest-cli&lt;/h2&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;スピードテストをCUIで行う場合は、恐らくspeedtest-cli一択。
&lt;code&gt;pip&lt;/code&gt;で入れるので、Pythonのインストールから。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install speedtest-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使い方&#34;&gt;使い方&lt;/h3&gt;

&lt;p&gt;一番シンプルなのは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;speedtest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。&lt;code&gt;speedtest-cli&lt;/code&gt;でも同じ結果が得られる。&lt;/p&gt;

&lt;p&gt;データ収集には不要な出力が多いのと、サーバーをping値で自動選択してしまうので、
以下のように使うことにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;speedtest --server 6476 --simple
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;シェルスクリプト&#34;&gt;シェルスクリプト&lt;/h2&gt;

&lt;h3 id=&#34;1ライン化&#34;&gt;1ライン化&lt;/h3&gt;

&lt;p&gt;上のコマンドをベースに、&lt;code&gt;cron&lt;/code&gt;で実行するシェルスクリプトを作成する。
1行にping, download, uploadをまとめたいので&lt;code&gt;tr&lt;/code&gt;でカンマと置換する。
また、速度以外は不要なので&lt;code&gt;awk&lt;/code&gt;を使って、以下のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/local/bin/speedtest --server 6476 --simple | awk &#39;{print $2}&#39; | tr &#39;\n&#39; &#39;,&#39; &amp;gt;&amp;gt; ~/tmp/speedtest.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cron&lt;/code&gt;ではコマンドを絶対パスで指定する必要があるので、絶対パスで書いている。&lt;/p&gt;

&lt;h3 id=&#34;実行日時を追加&#34;&gt;実行日時を追加&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;date &amp;quot;+%Y/%m/%d %H:%M:%S&amp;quot; &amp;gt;&amp;gt; ~/tmp/speedtest.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;リトライ機能を追加&#34;&gt;リトライ機能を追加&lt;/h3&gt;

&lt;p&gt;ここまででほぼ完成だけど、結構な頻度で失敗してたのでリトライ機能を追加した。
&lt;code&gt;cron&lt;/code&gt;でリトライしてくれればいいのに。
以下が完成形。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

command=&amp;quot;/usr/local/bin/speedtest --server 6476 --simple&amp;quot;

NEXT_WAIT_TIME=0
until RET=`$command` || [ $NEXT_WAIT_TIME -eq 4 ]; do
  sleep $(( (NEXT_WAIT_TIME++) * 60 ))
done
echo &amp;quot;$RET&amp;quot; | awk &#39;{print $2}&#39; | tr &#39;\n&#39; &#39;,&#39; &amp;gt;&amp;gt; ~/tmp/speedtest.log
date &amp;quot;+%Y/%m/%d %H:%M:%S&amp;quot; &amp;gt;&amp;gt; ~/tmp/speedtest.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4回までリトライする。リトライ間隔は、1分、2分、3分、4分と伸ばしていくようにした。&lt;/p&gt;

&lt;h2 id=&#34;cron&#34;&gt;cron&lt;/h2&gt;

&lt;p&gt;上のシェルスクリプトを&lt;code&gt;cron&lt;/code&gt;に登録する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、エディタが立ち上がる（もしくはエディタ選択画面になるので選ぶ）ので、
以下のように1時間毎に実行するように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 * * * * /usr/local/bin/speedtest_cron.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成。&lt;/p&gt;

&lt;h2 id=&#34;注意点&#34;&gt;注意点&lt;/h2&gt;

&lt;p&gt;実行環境はRaspberry Piを想定しているが、場合によってはRaspberry Pi自体がボトルネックとなって、
正しい速度が取れないので注意。うちの場合はMac Book Airを有線でつないで測定してもだいたい同じような値が取れることを確認している。&lt;/p&gt;

&lt;h2 id=&#34;関連ポスト&#34;&gt;関連ポスト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../ebroad/&#34;&gt;マンション付属の光回線が早くなった話&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry PiでSystemdを使ってdasherをサービス化</title>
      <link>http://shidetake.com/dasher_systemd/</link>
      <pubDate>Tue, 26 Sep 2017 23:42:10 +0900</pubDate>
      
      <guid>http://shidetake.com/dasher_systemd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../dash_button&#34;&gt;Amazon Dash Buttonを使ってLINEに通知する方法&lt;/a&gt;を以前書いた。
記事には記載していないが、このときは、init.dを使って自動起動するように設定していた。&lt;/p&gt;

&lt;p&gt;最近はinit.dは古くて、Systemdが推奨されているようなので、これに書き換えることにした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;サンプルソース&#34;&gt;サンプルソース&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/maddox/dasher/wiki/Running-Dasher-on-a-Raspberry-Pi-at-startup&#34; target=&#34;_blank&#34;&gt;GitHubのWiki&lt;/a&gt;
にサンプルソースがあったのでそのまま記載する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Dasher
After=network.target

[Service]
Type=simple
#user with access to dasher files
User=root
WorkingDirectory=/home/pi/dasher
#use command &amp;quot;which npm&amp;quot; to determine correct location of NPM
ExecStart=/usr/local/bin/npm run start
Restart=on-failure
RestartSec=10
KillMode=process

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unitセクション&#34;&gt;Unitセクション&lt;/h3&gt;

&lt;p&gt;SystemdではUnitという単位で処理を管理する。
init.dで言うサービスに当たる概念のようだ。&lt;/p&gt;

&lt;p&gt;ここではdasherが1つのUnitということになる。&lt;/p&gt;

&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;

&lt;p&gt;Unitの説明を書く。&lt;/p&gt;

&lt;h4 id=&#34;after&#34;&gt;After&lt;/h4&gt;

&lt;p&gt;このUnitが起動するタイミングを記述する。
ここではnetwork.targetの後に実行することになる。&lt;/p&gt;

&lt;p&gt;.targetというのは今回のように順序関係や依存関係を定義する際に、複数のUnitをグループ化するために使われる。
network.targetの実体は、&lt;code&gt;/lib/systemd/system/network.target&lt;/code&gt;にあるが、内容を確かめずとも、ネットワーク関連のUnit群であることがわかる(のでこれ以上詳しくは見ない)。&lt;/p&gt;

&lt;p&gt;ちなみにSystemdの起動時にはdefault.targetというUnitが有効化されることになっており、これに依存するUnitがまとめて有効化されていく。&lt;/p&gt;

&lt;h3 id=&#34;serviceセクション&#34;&gt;Serviceセクション&lt;/h3&gt;

&lt;p&gt;このセクションはUnitの種類によって異なる。
デーモンを起動する場合には.serviceなのでServiceセクションとなる。他にも上に出てきた.targetや.deviceなどいくつかの種類がある。&lt;/p&gt;

&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;

&lt;p&gt;サービスプロセスの起動完了の判定方法。
&lt;code&gt;simple&lt;/code&gt;を指定すると、&lt;code&gt;ExecStart&lt;/code&gt;で指定したコマンドを実行したタイミングで起動完了とみなす。&lt;/p&gt;

&lt;p&gt;起動完了をどう使うかは未調査。上述のAfterなど順序関係のためだろうか。&lt;/p&gt;

&lt;h4 id=&#34;user&#34;&gt;User&lt;/h4&gt;

&lt;p&gt;実行ユーザを指定する。rootで実行することになる。&lt;/p&gt;

&lt;h4 id=&#34;workingdirectory&#34;&gt;WorkingDirectory&lt;/h4&gt;

&lt;p&gt;実行時のカレントディレクトリを指定する。
ここではpiユーザーのhomeにdasherを取得したことになっている模様。
通常はセキュリティの観点からもpiユーザー以外にしているはずなので、ここは変更必須。&lt;/p&gt;

&lt;h4 id=&#34;execstart&#34;&gt;ExecStart&lt;/h4&gt;

&lt;p&gt;サービスを起動するコマンド。フルパスじゃないとダメらしい。
このタイミングではまだパスが通ってないのだろうか？&lt;/p&gt;

&lt;h4 id=&#34;restart&#34;&gt;Restart&lt;/h4&gt;

&lt;p&gt;再起動条件を指定する。&lt;code&gt;on-failure&lt;/code&gt;は終了コード0以外で停止した場合に再起動する設定。
ようするに異常終了した時は再起動してねってこと。&lt;/p&gt;

&lt;h4 id=&#34;restartsec&#34;&gt;RestartSec&lt;/h4&gt;

&lt;p&gt;再起動する前の待ち時間。Restartの設定と合わせて読むと、異常終了を検知したら10秒後に再起動してねってこと。&lt;/p&gt;

&lt;h4 id=&#34;killmode&#34;&gt;KillMode&lt;/h4&gt;

&lt;p&gt;サービス停止時にプロセスが残っていた場合の処理を指定する。
&lt;code&gt;process&lt;/code&gt;はメインプロセスが残っていたらkillする設定。&lt;/p&gt;

&lt;h3 id=&#34;installセクション&#34;&gt;Installセクション&lt;/h3&gt;

&lt;p&gt;systemctl enable/disableに関する設定群&lt;/p&gt;

&lt;h4 id=&#34;wantedby&#34;&gt;WantedBy&lt;/h4&gt;

&lt;p&gt;init.dで言うrunlevelの指定に相当する。
&lt;code&gt;multi-user.target&lt;/code&gt;はrunlevel 3に相当するので、CUIでログインすると起動することになる。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;上の設定を
&lt;code&gt;/etc/systemd/system/dasher.service&lt;/code&gt;に置いて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl list-unit-files --type=service | grep dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、dasher.serviceがサービスとして認識されていることがわかる。
この時点ではdisable状態。&lt;/p&gt;

&lt;p&gt;続いて自動起動を有効化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してから、先程のコマンドを再送すると、enableに変わっているはず。
この状態で再起動する。そして、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl status dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でactive状態になっていればOK&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DDNSでLANの外から自宅のRaspberry PiにSSH接続する</title>
      <link>http://shidetake.com/ddns/</link>
      <pubDate>Mon, 18 Sep 2017 21:51:18 +0900</pubDate>
      
      <guid>http://shidetake.com/ddns/</guid>
      <description>&lt;p&gt;普通のインターネット回線では、グローバルIPが定期的に変わってしまうため、
自宅に置いたRaspberry Piなんかをサーバー代わりに使うには不便。&lt;/p&gt;

&lt;p&gt;かといって、固定グローバルIPアドレスを貰うには月1000円くらい払う必要がある。&lt;/p&gt;

&lt;p&gt;そこで、Dynamic DNS (DDNS) というサービスを利用することにする。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;ddnsとは&#34;&gt;DDNSとは&lt;/h2&gt;

&lt;p&gt;Domain Name System (DNS) は、ドメイン名とIPアドレスを紐付けるシステムのこと。
サーバーへのアクセスは通常、IPアドレスによって対象サーバーを判別するが、
IPアドレスは数値の羅列で人間には覚えにくいので、ドメイン名という覚えやすい名称に変換する。&lt;/p&gt;

&lt;p&gt;Dynamic DNSというのは、その紐付けをDynamicに、つまり動的に行う。
グローバルIPが変化しても、ドメイン名との紐付けを再度行うことで、ドメイン名の固定ができるというわけ。&lt;/p&gt;

&lt;p&gt;世の中にはこんな便利なサービスを無料で提供してくれる人たちがいる。&lt;/p&gt;

&lt;h2 id=&#34;登録&#34;&gt;登録&lt;/h2&gt;

&lt;p&gt;いくつか選択肢はあるが、今回は&lt;a href=&#34;https://www.noip.com&#34; target=&#34;_blank&#34;&gt;no-ip&lt;/a&gt;というサービスを使うことにした。
なぜなら、&lt;a href=&#34;http://portaltan.hatenablog.com/entry/2017/02/07/092205&#34; target=&#34;_blank&#34;&gt;raspberryPi にnoipでDDNSの設定をする方法&lt;/a&gt;というサイトを参考にしたため。&lt;/p&gt;

&lt;p&gt;登録・設定から自動実行まで、ほぼほぼこの手順でいける。&lt;/p&gt;

&lt;p&gt;ただ、Dynamic Domain Update Client (DUC) の自動起動の設定だけは、少し好みではなかったのでアレンジした。&lt;/p&gt;

&lt;h2 id=&#34;ducの自動起動設定&#34;&gt;DUCの自動起動設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/etc/init.d/noip2&lt;/code&gt;を以下のように書き換えた。
自動起動の設定を先頭に追加しただけ。これにより、わざわざrc.localに起動のためのコマンドを書かなくとも、
自動で起動してくれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/sh
# /etc/init.d/noip2.sh
### BEGIN INIT INFO
# Provides:          noip2
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
### END INIT INFO

# Supplied by no-ip.com
# Modified for Debian GNU/Linux by Eivind L. Rygge &amp;lt;eivind@rygge.org&amp;gt;
# corrected 1-17-2004 by Alex Docauer &amp;lt;alex@docauer.net&amp;gt;

# . /etc/rc.d/init.d/functions  # uncomment/modify for your killproc

DAEMON=/usr/local/bin/noip2
NAME=noip2

test -x $DAEMON || exit 0

case &amp;quot;$1&amp;quot; in
    start)
    echo -n &amp;quot;Starting dynamic address update: &amp;quot;
    start-stop-daemon --start --exec $DAEMON
    echo &amp;quot;noip2.&amp;quot;
    ;;
    stop)
    echo -n &amp;quot;Shutting down dynamic address update:&amp;quot;
    start-stop-daemon --stop --oknodo --retry 30 --exec $DAEMON
    echo &amp;quot;noip2.&amp;quot;
    ;;

    restart)
    echo -n &amp;quot;Restarting dynamic address update: &amp;quot;
    start-stop-daemon --stop --oknodo --retry 30 --exec $DAEMON
    start-stop-daemon --start --exec $DAEMON
    echo &amp;quot;noip2.&amp;quot;
    ;;

    *)
    echo &amp;quot;Usage: $0 {start|stop|restart}&amp;quot;
    exit 1
esac
exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;動作確認&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;自動起動するかどうか、実際に再起動して確かめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;からの、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /usr/local/bin/noip2 -S

Process 445, started as noip2, (version 2.1.9)
Using configuration from /usr/local/etc/no-ip2.conf
Last IP Address set 0.0.0.0
Account hogehoge@gmail.com
configured for:
	host  hogehoge.ddns.net
Updating every 30 minutes via /dev/wlan0 with NAT enabled.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、なんとIPアドレスが0になってしまっている。
失敗か？と思ったが、特に問題なくつながる。
30分後に再度確認したら正しいIPアドレスがセットされていた。どうやら起動後1発目のIPアドレスセットの内容は反映されないらしい。
Last IP Addressとあるので、初回より前のアドレスを出そうとしているのだろうか。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
