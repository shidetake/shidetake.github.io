<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amazon Dash Button on blog</title>
    <link>https://shidetake.com/tags/amazon-dash-button/</link>
    <description>Recent content in Amazon Dash Button on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Sep 2017 23:42:10 +0900</lastBuildDate>
    
        <atom:link href="https://shidetake.com/tags/amazon-dash-button/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry PiでSystemdを使ってdasherをサービス化</title>
      <link>https://shidetake.com/dasher_systemd/</link>
      <pubDate>Tue, 26 Sep 2017 23:42:10 +0900</pubDate>
      
      <guid>https://shidetake.com/dasher_systemd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../dash_button&#34;&gt;Amazon Dash Buttonを使ってLINEに通知する方法&lt;/a&gt;を以前書いた。
記事には記載していないが、このときは、init.dを使って自動起動するように設定していた。&lt;/p&gt;

&lt;p&gt;最近はinit.dは古くて、Systemdが推奨されているようなので、これに書き換えることにした。&lt;/p&gt;

&lt;h2 id=&#34;サンプルソース&#34;&gt;サンプルソース&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/maddox/dasher/wiki/Running-Dasher-on-a-Raspberry-Pi-at-startup&#34; target=&#34;_blank&#34;&gt;GitHubのWiki&lt;/a&gt;
にサンプルソースがあったのでそのまま記載する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Dasher
After=network.target

[Service]
Type=simple
#user with access to dasher files
User=root
WorkingDirectory=/home/pi/dasher
#use command &amp;quot;which npm&amp;quot; to determine correct location of NPM
ExecStart=/usr/local/bin/npm run start
Restart=on-failure
RestartSec=10
KillMode=process

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unitセクション&#34;&gt;Unitセクション&lt;/h3&gt;

&lt;p&gt;SystemdではUnitという単位で処理を管理する。
init.dで言うサービスに当たる概念のようだ。&lt;/p&gt;

&lt;p&gt;ここではdasherが1つのUnitということになる。&lt;/p&gt;

&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;

&lt;p&gt;Unitの説明を書く。&lt;/p&gt;

&lt;h4 id=&#34;after&#34;&gt;After&lt;/h4&gt;

&lt;p&gt;このUnitが起動するタイミングを記述する。
ここではnetwork.targetの後に実行することになる。&lt;/p&gt;

&lt;p&gt;.targetというのは今回のように順序関係や依存関係を定義する際に、複数のUnitをグループ化するために使われる。
network.targetの実体は、&lt;code&gt;/lib/systemd/system/network.target&lt;/code&gt;にあるが、内容を確かめずとも、ネットワーク関連のUnit群であることがわかる(のでこれ以上詳しくは見ない)。&lt;/p&gt;

&lt;p&gt;ちなみにSystemdの起動時にはdefault.targetというUnitが有効化されることになっており、これに依存するUnitがまとめて有効化されていく。&lt;/p&gt;

&lt;h3 id=&#34;serviceセクション&#34;&gt;Serviceセクション&lt;/h3&gt;

&lt;p&gt;このセクションはUnitの種類によって異なる。
デーモンを起動する場合には.serviceなのでServiceセクションとなる。他にも上に出てきた.targetや.deviceなどいくつかの種類がある。&lt;/p&gt;

&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;

&lt;p&gt;サービスプロセスの起動完了の判定方法。
&lt;code&gt;simple&lt;/code&gt;を指定すると、&lt;code&gt;ExecStart&lt;/code&gt;で指定したコマンドを実行したタイミングで起動完了とみなす。&lt;/p&gt;

&lt;p&gt;起動完了をどう使うかは未調査。上述のAfterなど順序関係のためだろうか。&lt;/p&gt;

&lt;h4 id=&#34;user&#34;&gt;User&lt;/h4&gt;

&lt;p&gt;実行ユーザを指定する。rootで実行することになる。&lt;/p&gt;

&lt;h4 id=&#34;workingdirectory&#34;&gt;WorkingDirectory&lt;/h4&gt;

&lt;p&gt;実行時のカレントディレクトリを指定する。
ここではpiユーザーのhomeにdasherを取得したことになっている模様。
通常はセキュリティの観点からもpiユーザー以外にしているはずなので、ここは変更必須。&lt;/p&gt;

&lt;h4 id=&#34;execstart&#34;&gt;ExecStart&lt;/h4&gt;

&lt;p&gt;サービスを起動するコマンド。フルパスじゃないとダメらしい。
このタイミングではまだパスが通ってないのだろうか？&lt;/p&gt;

&lt;h4 id=&#34;restart&#34;&gt;Restart&lt;/h4&gt;

&lt;p&gt;再起動条件を指定する。&lt;code&gt;on-failure&lt;/code&gt;は終了コード0以外で停止した場合に再起動する設定。
ようするに異常終了した時は再起動してねってこと。&lt;/p&gt;

&lt;h4 id=&#34;restartsec&#34;&gt;RestartSec&lt;/h4&gt;

&lt;p&gt;再起動する前の待ち時間。Restartの設定と合わせて読むと、異常終了を検知したら10秒後に再起動してねってこと。&lt;/p&gt;

&lt;h4 id=&#34;killmode&#34;&gt;KillMode&lt;/h4&gt;

&lt;p&gt;サービス停止時にプロセスが残っていた場合の処理を指定する。
&lt;code&gt;process&lt;/code&gt;はメインプロセスが残っていたらkillする設定。&lt;/p&gt;

&lt;h3 id=&#34;installセクション&#34;&gt;Installセクション&lt;/h3&gt;

&lt;p&gt;systemctl enable/disableに関する設定群&lt;/p&gt;

&lt;h4 id=&#34;wantedby&#34;&gt;WantedBy&lt;/h4&gt;

&lt;p&gt;init.dで言うrunlevelの指定に相当する。
&lt;code&gt;multi-user.target&lt;/code&gt;はrunlevel 3に相当するので、CUIでログインすると起動することになる。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;上の設定を
&lt;code&gt;/etc/systemd/system/dasher.service&lt;/code&gt;に置いて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl list-unit-files --type=service | grep dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、dasher.serviceがサービスとして認識されていることがわかる。
この時点ではdisable状態。&lt;/p&gt;

&lt;p&gt;続いて自動起動を有効化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してから、先程のコマンドを再送すると、enableに変わっているはず。
この状態で再起動する。そして、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl status dasher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でactive状態になっていればOK&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amazon Dash ButtonからLINE通知</title>
      <link>https://shidetake.com/dash_button/</link>
      <pubDate>Thu, 11 May 2017 22:31:20 +0900</pubDate>
      
      <guid>https://shidetake.com/dash_button/</guid>
      <description>&lt;h2 id=&#34;dasher導入&#34;&gt;dasher導入&lt;/h2&gt;

&lt;p&gt;他の人が詳しく書いているので割愛。&lt;br /&gt;
個人的には&lt;a href=&#34;http://kakts-tec.hatenablog.com/entry/2016/12/10/231205&#34; target=&#34;_blank&#34;&gt;Amazon Dash Button と slackを連携させる&lt;/a&gt;という記事がとても参考になった。&lt;/p&gt;

&lt;h2 id=&#34;lineへのpush通知設定&#34;&gt;LINEへのPUSH通知設定&lt;/h2&gt;

&lt;p&gt;LINE側の設定は&lt;a href=&#34;../line_push/&#34;&gt;LINE BOTでPUSH通知する&lt;/a&gt;を参照。&lt;/p&gt;

&lt;p&gt;CHANNEL_ACCESS_TOKENとUSERIDは上記事で取得したもの。
MAC_ADDRESSはdasher導入時に取得したものを書くこと。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;buttons&amp;quot;: [
  {
    &amp;quot;name&amp;quot;: &amp;quot;joy&amp;quot;,
    &amp;quot;address&amp;quot;: &amp;quot;MAC_ADDRESS&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://api.line.me/v2/bot/message/push&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
    &amp;quot;headers&amp;quot;: {
      &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
      &amp;quot;Authorization&amp;quot;: &amp;quot;Bearer {CHANNEL_ACCESS_TOKEN}&amp;quot;},
    &amp;quot;json&amp;quot;: true,
    &amp;quot;body&amp;quot;: {
      &amp;quot;to&amp;quot;: &amp;quot;USERID&amp;quot;,
      &amp;quot;messages&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;,
          &amp;quot;text&amp;quot;: &amp;quot;JOY!&amp;quot;
        }
      ]
    }
  }
]}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
